# docker-compose.yml
version: '3.8'

services:
  # FastAPI Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiktok-api-web
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=postgresql://postgres:password@db:5432/tiktok_api_db
      # Redis
      - REDIS_URL=redis://redis:6379/0
      # Application Settings
      - ENVIRONMENT=development
      - DEBUG=True
      # TikTok API (bu değerleri .env dosyasından alacak)
      - TIKTOK_CLIENT_KEY=${TIKTOK_CLIENT_KEY}
      - TIKTOK_CLIENT_SECRET=${TIKTOK_CLIENT_SECRET}
      - TIKTOK_REDIRECT_URI=${TIKTOK_REDIRECT_URI}
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - TOKEN_ENCRYPTION_KEY=${TOKEN_ENCRYPTION_KEY}
      - TOKEN_ENCRYPTION_SALT=${TOKEN_ENCRYPTION_SALT}
      - TIKTOK_API_VERSION=v2
      - TIKTOK_COMMERCIAL_API_ENABLED=${TIKTOK_COMMERCIAL_API_ENABLED:-false}
      - LOG_LEVEL=debug
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - tiktok-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: tiktok-api-db
    environment:
      - POSTGRES_DB=tiktok_api_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tiktok-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tiktok-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tiktok-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (Production için)
  nginx:
    image: nginx:alpine
    container_name: tiktok-api-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - tiktok-network
    profiles:
      - production

  # PgAdmin (Database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tiktok-api-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - tiktok-network
    profiles:
      - development

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  tiktok-network:
    driver: bridge